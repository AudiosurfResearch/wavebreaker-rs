generator client {
    provider        = "cargo prisma"
    output          = "../src/prisma.rs"
    previewFeatures = ["postgresqlExtensions", "fullTextSearch"]
}

datasource db {
    provider   = "postgres"
    url        = env("DATABASE_URL")
    extensions = [pg_trgm]
}

enum AccountType {
    BANNED
    REGULAR
    MODERATOR
    WAVEBREAKER_TEAM
}

model User {
    id Int @id @default(autoincrement())

    rivals      User[]  @relation("rivalries")
    challengers User[]  @relation("rivalries")
    scores      Score[]
    shouts      Shout[]

    username        String
    steamId64       String      @unique
    steamId32       Int         @unique
    locationId      Int         @default(1)
    accountType     AccountType @default(REGULAR)
    joinedAt        DateTime    @default(now())
    avatarUrl       String?
    avatarUrlMedium String?
    avatarUrlSmall  String?
}

model Song {
    id Int @id @default(autoincrement())

    scores Score[]
    shouts Shout[]

    title             String
    artist            String
    tags              String[] @default([])
    mbid              String?
    musicbrainzTitle  String?
    musicbrainzArtist String?
    musicbrainzLength Int?
    mistagLock        Boolean  @default(false)
    coverUrl          String?
    smallCoverUrl     String?

    @@unique([title, artist, tags])
}

model Score {
    id Int @id @default(autoincrement())

    userId Int
    player User @relation(fields: [userId], references: [id], onDelete: Cascade)
    song   Song @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    songId Int

    leagueId      Int
    trackShape    String
    xstats        String
    density       Int
    vehicleId     Int
    score         Int
    skillPoints   Int
    rideTime      DateTime @default(now()) //NOTE: When sending to the game, get it as UNIX time, divide by 1000 and Math.floor it
    feats         String
    songLength    Int
    goldThreshold Int
    iss           Int
    isj           Int
    playCount     Int      @default(1) //Total play count on this difficulty

    @@unique([userId, leagueId, songId])
}

model Shout {
    id Int @id @default(autoincrement())

    authorId Int
    author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    songId   Int
    song     Song @relation(fields: [songId], references: [id], onDelete: Cascade)

    content     String
    timeCreated DateTime @default(now())
}
