//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Song")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub artist: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub cover_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub mbid: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub musicbrainz_artist: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub musicbrainz_title: Option<String>,
    pub musicbrainz_length: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub small_cover_url: Option<String>,
    pub mistag_lock: bool,
    pub tags: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::score::Entity")]
    Score,
    #[sea_orm(has_many = "super::shout::Entity")]
    Shout,
}

impl Related<super::score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Score.def()
    }
}

impl Related<super::shout::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shout.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
