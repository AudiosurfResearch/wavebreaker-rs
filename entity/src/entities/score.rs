//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Score")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub league_id: i32,
    #[sea_orm(column_type = "Text")]
    pub track_shape: String,
    #[sea_orm(column_type = "Text")]
    pub xstats: String,
    pub density: i32,
    pub vehicle_id: i32,
    pub score: i32,
    pub ride_time: DateTime,
    #[sea_orm(column_type = "Text")]
    pub feats: String,
    pub song_length: i32,
    pub gold_threshold: i32,
    pub iss: i32,
    pub isj: i32,
    pub song_id: i32,
    pub play_count: i32,
    pub skill_points: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::song::Entity",
        from = "Column::SongId",
        to = "super::song::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Song,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::UserId",
        to = "super::player::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Player,
}

impl Related<super::song::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Song.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
